Text editor => https://code.visualstudio.com/
Node =>  https://nodejs.org/en/
github => https://github.com
window => https://git-scm.com/downloads

Check nodejs
>>node -v

npm
node package manager

package.json
>> npm init
package name: (learnpackage) dummynodeapp
version: (1.0.0) 
description: this is app for learning packages
entry point: (index.js) 
test command: 
git repository: 
keywords: node api dashboard
author: edureka
license: (ISC) 


//////JSON///////////
[
    {
        name:"john",
        class:"Node"
    },
    {
        name:"Andy",
        class:"React"
    }
]


/////Install Package////
npm install --save body-parser

Local Module/packages
gloabal
>> 
>>Mac> sudo npm install -g nodemon
>>Window> run cmd as admin > npm install -g nodemon

npm install body-praser@1.18.2

>> yarn


///
Es5=>Ecma Script
Es6

npm init --yes

curl -X GET --header "Accept: application/json" --header "Authorization: Basic c2ltcGx5cmV0czpzaW1wbHlyZXRz" "https://api.simplyrets.com/openhouses"

curl -u simplyrets:simplyrets 'https://api.simplyrets.com/properties?limit=500&lastId=0'


//////
sudo npm install -g nodemon


////
function add(a,b){
    return a+b
}

var add = (a,b) => { return a+b}

var 
let
const

var a = 10
undefined
a
10
var a =20
undefined
a
20
let b = 20
undefined
b
20
let b = 30
VM124:1 Uncaught SyntaxError: Identifier 'b' has already been declared
    at <anonymous>:1:1
(anonymous) @ VM124:1
b = 30
30
const c = 10
undefined
c
10
const c = 11
VM165:1 Uncaught SyntaxError: Identifier 'c' has already been declared
    at <anonymous>:1:1
(anonymous) @ VM165:1
c= 11
VM173:1 Uncaught TypeError: Assignment to constant variable.
    at <anonymous>:1:2


/***********
var = you can redeclare and reassign
let = you cannot redeclare but reassign
const = you cannot redeclare nor reassign
***********/


//*********
Transpile
**********/
babel

Step1> install packages
@babel/core
@babel/preset-env
@babel-register
babel-polyfill

Step2> 
Create .babelrc

step3>
create start file
use running file thorugh start



/*************
*************/
var a = 10
var b = "my age is "+a
var c = `my age is ${a}`

git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/Aakashdeveloper/fsnodeapp.git
git push -u origin master


/*
nodemon
os 
fs 
path
url
util
Transpile
babel
express
routes
git
herkou
ejs
*/

npm run dev
------------
//routes

/-working
/movies- working
/resturt -working

Req
details for each package

/details (for movies)
/details (for resturt)

---------------Resolve-----------
express.Router()
one router for movies & one for resturt

/movies- working
/resturt -working
/movies/details - working
/resturt/details - working



////////
CI/CD

>git clone https://github.com/Aakashdeveloper/gitlearn.git

git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/Aakashdeveloper/fsnodeapp.git
git push -u origin master

git branch -a

git checkout -b development
create pull request
merge code


to save local changes
git stash

git pull

git stash pop


////////////
sno  hindi  english
1     80  
2             80
[
    {
        sno:1,
        hindi: 80
    },
    {
        sno:2,
        english:80
    },
    {
        sno:2,
        english:80,
        phy:85
    }
]

db => db
table => collections
row => document


https://www.mongodb.com/download-center/community

c:/
create db
inside db > data

default port 27017
step1> mongod
step2> mongo


/*==================
    Mongo command
=====================*/
To See all database
> show dbs 
To Use any Data base
> use <database name>
To see all collections
> show collections
To Find data (select query)
> db.<collections_name>.find();
> db.<collections_name>.find().pretty();
Insert query
> db.<collections_name>.insert({name:"a",class:"b"})
> db.<collections_name>.save({})

Create new Database
> use <database>     (must create collections to see database)
Find with condition
> db.<collections_name>.find({name:"ds",class:"dv"})
For one record
> db.restaurants.findOne()
For Insert Many
> db.<collections_name>.insertMany([
    {},{}
])
To Limit Data
> db.<collections_name>.find().limit(2)
Project
> db.<collections_name>.find({},{_id:0,name:1})
> db.<collections_name>.find({<query>},{<projections>})
sort
> db.movies.find({<query>},{<projections>).sort({rate:-1}).pretty()
skip
> db.movies.find().skip(1).sort({rate:-1}).limit(3).pretty()
Distinct
> db.movies.distinct("rate")
count 
> db.<collections_name>.count()
Update
> db.movies.update({rate:4.5},{$set:{rate:4.6}})
> db.movies.update({rate:4.5},{rate:4.6})
Upsert
>  db.movies.update({rate:3},{
        "name" : "Thor",
        "language" : "ENGLISH",
        "rate" : 3,
        "type" : "Action Adventure Fantasy",
        "imageUrl" : "https://image.ibb.co/f0hhZc/bp.jpg"
    },{upsert: true})
Delete
> db.movies.remove({rate:3.4})


CRUD
Get Post Put Delete



var a = 10

var a 
a = 10


///Docker
All images
> Docker image ls

Delete images
> Docker rmi <imageid>

Running Container
> Docker ps
 docker ps —all

Create Container
> docker create hello-world
Start Container
> docker start -a  5d2c3d76e4615f48b5f5850658f0755430f9676adc35e0954818af0cb26dd0e1


Restart Container
> docker ps —all
> take id(name)
> docker start -a <id>

Remove all stopped images
>Docker system prune

Putting Logs in container
> docker create <image name>
> docker start <id>
> docker logs <id>

Stop container
> docker stop/kill < container id>

Run reds on docker
> docker run redis
Run second command inside the container
> docker exec -it <container_id> <command>

Open command prompt
> docker exec <container_id> sh

Build new image
Create DockerFile
> docker build .
> Docker run <container id>

Provide name to image
> docker build -t ahanda205/nodeapp .

Expose port
> docker run -p 8000:8000 ahanda205/nodeapp

DockerCompose
> create Docker-compose.yml
> Docker-compose up

Run in background
> docker-compose up -d
> docker-compose down

Particular file
> docker build -f Dockerfile.dev

Look for local repo
Docker run -p 3000:3000 -v /app/node_modules -v ${pwd}:/app <imageid>